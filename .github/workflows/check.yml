name: My Comment-based Pipeline

on:
  issue_comment:
    types:
      - created

permissions: write-all

jobs:
  test-job-1:
    name: Test job 1
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/build' }}
    steps:
      - name: Check if PR is open
        run: |
          STATE=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json state --jq .state)
          if [ "$STATE" != "OPEN" ]; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
          NODE_ID: ${{ github.event.comment.node_id }}

      - name: Get PR HEAD Ref
        id: getRef
        run: echo "pr_ref=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json headRefOid | jq -r '.headRefOid')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}

      - name: Checkout source code from Github
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.getRef.outputs.pr_ref }}
 
      - name: Run tests
        id: long_task
        run: |
          # npm ci --ignore-scripts
          npm run test1
    
  test-job-2:
    name: Test job 2
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/build' }}
    steps:
      - name: Check if PR is open
        run: |
          STATE=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json state --jq .state)
          if [ "$STATE" != "OPEN" ]; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
          NODE_ID: ${{ github.event.comment.node_id }}

      - name: Get PR HEAD Ref
        id: getRef
        run: echo "pr_ref=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json headRefOid | jq -r '.headRefOid')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}

      - name: Checkout source code from Github
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.getRef.outputs.pr_ref }}

      - name: Run tests
        id: long_task
        run: |
          # npm ci --ignore-scripts
          npm run test2

  test-job-3:
    name: Test job 3
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request && github.event.comment.body == '/build' }}
    steps:
      - name: Check if PR is open
        run: |
          STATE=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json state --jq .state)
          if [ "$STATE" != "OPEN" ]; then
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}
          NODE_ID: ${{ github.event.comment.node_id }}

      - name: Get PR HEAD Ref
        id: getRef
        run: echo "pr_ref=$(gh pr view $PR_NUMBER --repo ${{ github.repository }} --json headRefOid | jq -r '.headRefOid')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.issue.number }}

      - name: Checkout source code from Github
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ steps.getRef.outputs.pr_ref }}

      - name: Run tests
        id: long_task
        run: |
          # npm ci --ignore-scripts
          npm run test3

  notify-job:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [test-job-1,test-job-2,test-job-3]
    if: always()
    steps:
      - uses: actions/github-script@v6
        env:
          TEST1: ${{ needs.test-job-1.result == 'success' && 'Tests 1 is ok ✅' || 'Tests 1 is not ok ❌' }}
          TEST2: ${{ needs.test-job-2.result == 'success' && 'Tests 2 is ok ✅' || 'Tests 2 is not ok ❌' }}
          TEST3: ${{ needs.test-job-3.result == 'success' && 'Tests 3 is ok ✅' || 'Tests 3 is not ok ❌' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const actions = [
              process.env.TEST1,
              process.env.TEST2,
              process.env.TEST3,
            ];

            const body = `**${actions.join('\n')}**`;

            if (actions.length) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body
              });
            }
      # - name: Notify on Failure
      #   if: ${{ contains(needs.build.result, 'failure') }}
      #   run: |
      #     gh api graphql --silent --raw-field query="mutation AddReaction {addReaction(input:{subjectId:\"$NODE_ID\",content:THUMBS_DOWN}){reaction{content}subject{id}}}"
      #     gh api graphql --silent --raw-field query="mutation RemoveReaction {removeReaction(input:{subjectId:\"$NODE_ID\",content:EYES}){reaction{content}subject{id}}}"
      #     (
      #       echo "**${{ github.workflow }}**"
      #       echo "**❌ Something went wrong!**"
      #       echo
      #       echo "**Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #     ) | \
      #     gh pr comment "${PR_NUMBER}" --repo ${{ github.repository }} -F -          
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PR_NUMBER: ${{ github.event.issue.number }}
      #     NODE_ID: ${{ github.event.comment.node_id }}

      # - name: Notify on Success
      #   if: ${{ contains(needs.build.result, 'success') }}
      #   run: |
      #     echo "Success ..."
      #     # gh api graphql --silent --raw-field query="mutation AddReaction {addReaction(input:{subjectId:\"$NODE_ID\",content:THUMBS_UP}){reaction{content}subject{id}}}"
      #     # gh api graphql --silent --raw-field query="mutation RemoveReaction {removeReaction(input:{subjectId:\"$NODE_ID\",content:EYES}){reaction{content}subject{id}}}"
      #     (
      #       echo "**${{ github.workflow }}**"
      #       echo "**✅ All is ok!**"
      #       echo
      #       echo "**Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      #     ) | \
      #     gh pr comment "${PR_NUMBER}" --repo ${{ github.repository }} -F -          
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PR_NUMBER: ${{ github.event.issue.number }}
      #     NODE_ID: ${{ github.event.comment.node_id }}
    
      